#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations
import builtins


import typing as _typing
import types as _py_types

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import folly.iobuf as _fbthrift_iobuf
from thrift.python.client import (
    AsyncClient as _fbthrift_python_AsyncClient,
    SyncClient as _fbthrift_python_SyncClient,
    Client as _fbthrift_python_Client,
)
from thrift.python.client.omni_client import InteractionMethodPosition as _fbthrift_InteractionMethodPosition, FunctionQualifier as _fbthrift_FunctionQualifier
from thrift.python.common import RpcOptions
import thrift.python.exceptions as _fbthrift_python_exceptions
import thrift.python.types as _fbthrift_python_types
import meta.example.thrift.service.thrift_types as _fbthrift__meta__example__thrift__service__thrift_types
import meta.example.thrift.service.thrift_metadata as _fbthrift__meta__example__thrift__service__thrift_metadata
import test.fixtures.basic.module.thrift_types as _fbthrift__test__fixtures__basic__module__thrift_types
import test.fixtures.basic.module.thrift_clients

class EchoService(_fbthrift_python_Client["EchoService.Async", "EchoService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "service.EchoService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_EchoService()
    
    class Async(_fbthrift_python_AsyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "service.EchoService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_EchoService()
    
        async def echo(
            self,
            request: _fbthrift__meta__example__thrift__service__thrift_types.EchoRequest,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__meta__example__thrift__service__thrift_types.EchoResponse:
            _fbthrift_resp = await self._send_request(
                "EchoService",
                "echo",
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_EchoService_echo_args(
                    request=request,),
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_EchoService_echo_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="EchoService",
                rpc_options=rpc_options,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__ex`
            if (_fbthrift_ex := _fbthrift_resp._ex0__ex) is not None:
                raise _fbthrift_ex
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    echo = Async.echo
    
    class Sync(_fbthrift_python_SyncClient):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "service.EchoService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_EchoService()
    
        def echo(
            self,
            request: _fbthrift__meta__example__thrift__service__thrift_types.EchoRequest,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__meta__example__thrift__service__thrift_types.EchoResponse:
            _fbthrift_resp = self._send_request(
                "EchoService",
                "echo",
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_EchoService_echo_args(
                    request=request,),
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_EchoService_echo_result,
                uri_or_name="EchoService",
                rpc_options=rpc_options,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__ex`
            if (_fbthrift_ex := _fbthrift_resp._ex0__ex) is not None:
                raise _fbthrift_ex
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )


class ExtendedEchoService(_fbthrift_python_Client["ExtendedEchoService.Async", "ExtendedEchoService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "service.ExtendedEchoService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_ExtendedEchoService()
    
    class Async(EchoService.Async):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "service.ExtendedEchoService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_ExtendedEchoService()
    
        async def echo_2(
            self,
            request: _fbthrift__meta__example__thrift__service__thrift_types.EchoRequest,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__meta__example__thrift__service__thrift_types.EchoResponse:
            _fbthrift_resp = await self._send_request(
                "ExtendedEchoService",
                "echo_2",
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedEchoService_echo_2_args(
                    request=request,),
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedEchoService_echo_2_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="ExtendedEchoService",
                rpc_options=rpc_options,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__ex`
            if (_fbthrift_ex := _fbthrift_resp._ex0__ex) is not None:
                raise _fbthrift_ex
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    echo_2 = Async.echo_2
    
    class Sync(EchoService.Sync):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "service.ExtendedEchoService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_ExtendedEchoService()
    
        def echo_2(
            self,
            request: _fbthrift__meta__example__thrift__service__thrift_types.EchoRequest,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> _fbthrift__meta__example__thrift__service__thrift_types.EchoResponse:
            _fbthrift_resp = self._send_request(
                "ExtendedEchoService",
                "echo_2",
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedEchoService_echo_2_args(
                    request=request,),
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedEchoService_echo_2_result,
                uri_or_name="ExtendedEchoService",
                rpc_options=rpc_options,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            # pyre-ignore[16]: `type(_fbthrift_resp)` has no attribute `_ex0__ex`
            if (_fbthrift_ex := _fbthrift_resp._ex0__ex) is not None:
                raise _fbthrift_ex
            raise _fbthrift_python_exceptions.ApplicationError(
                _fbthrift_python_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )


class ExtendedMyService(_fbthrift_python_Client["ExtendedMyService.Async", "ExtendedMyService.Sync"]):
    annotations = _py_types.MappingProxyType({
    })
    @staticmethod
    def __get_thrift_name__() -> str:
        return "service.ExtendedMyService"
    
    @staticmethod
    def __get_thrift_uri__() -> _typing.Optional[str]:
        return None
    
    @staticmethod
    def __get_thrift_unstructured_annotations_DEPRECATED__() -> _typing.Mapping[str, str]:
        return {
        }
    
    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_ExtendedMyService()
    
    class Async(test.fixtures.basic.module.thrift_clients.MyService.Async):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "service.ExtendedMyService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_ExtendedMyService()
    
        async def putDataById_2(
            self,
            id: builtins.int,
            data: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> None:
            _fbthrift_resp = await self._send_request(
                "ExtendedMyService",
                "putDataById_2",
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedMyService_putDataById_2_args(
                    id=id,
                    data=data,),
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedMyService_putDataById_2_result,
                qualifier = _fbthrift_FunctionQualifier.Unspecified,
                uri_or_name="ExtendedMyService",
                rpc_options=rpc_options,
            )
    
    
    # pyre-ignore[4]: Missing annotation.
    putDataById_2 = Async.putDataById_2
    
    class Sync(test.fixtures.basic.module.thrift_clients.MyService.Sync):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "service.ExtendedMyService"
    
        @staticmethod
        def __get_thrift_uri__() -> _typing.Optional[str]:
            return None
    
        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return _fbthrift__meta__example__thrift__service__thrift_metadata.gen_metadata_service_ExtendedMyService()
    
        def putDataById_2(
            self,
            id: builtins.int,
            data: builtins.str,
            *,
            rpc_options: _typing.Optional[RpcOptions] = None,
        ) -> None:
            _fbthrift_resp = self._send_request(
                "ExtendedMyService",
                "putDataById_2",
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedMyService_putDataById_2_args(
                    id=id,
                    data=data,),
                _fbthrift__meta__example__thrift__service__thrift_types._fbthrift_ExtendedMyService_putDataById_2_result,
                uri_or_name="ExtendedMyService",
                rpc_options=rpc_options,
            )

