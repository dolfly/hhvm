#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import __static__

import typing as _typing
import builtins


import enum

import folly.iobuf as _fbthrift_iobuf
import module.thrift_abstract_types as _fbthrift_python_abstract_types
import fbcode.thrift.python.types as _fbthrift_python_types
import fbcode.thrift.python.exceptions as _fbthrift_python_exceptions

from module.thrift_enums import (
    AnEnum as _fbthrift_AnEnum,
    AnEnumRenamed as _fbthrift_AnEnumRenamed,
    Flags as _fbthrift_Flags,
)
AnEnum = _fbthrift_AnEnum
AnEnumRenamed = _fbthrift_AnEnumRenamed
Flags = _fbthrift_Flags


class SimpleException(_fbthrift_python_exceptions.GeneratedError, _fbthrift_python_abstract_types.SimpleException):
    err_code: _typing.Final[builtins.int] = ...
    def __init__(
        self, *,
        err_code: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.SimpleException": ...  # type: ignore
    def _to_py3(self) -> "module.types.SimpleException": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.SimpleException": ...  # type: ignore
_fbthrift_SimpleException = SimpleException

class OptionalRefStruct(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.OptionalRefStruct):
    optional_blob: _typing.Final[_typing.Optional[_fbthrift_iobuf.IOBuf]] = ...
    def __init__(
        self, *,
        optional_blob: _typing.Optional[_fbthrift_iobuf.IOBuf]=...
    ) -> None: ...

    def __call__(
        self, *,
        optional_blob: _typing.Optional[_fbthrift_iobuf.IOBuf]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_iobuf.IOBuf]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.OptionalRefStruct": ...  # type: ignore
    def _to_py3(self) -> "module.types.OptionalRefStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.OptionalRefStruct": ...  # type: ignore
_fbthrift_OptionalRefStruct = OptionalRefStruct

class SimpleStruct(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.SimpleStruct):
    is_on: _typing.Final[builtins.bool] = ...
    tiny_int: _typing.Final[builtins.int] = ...
    small_int: _typing.Final[builtins.int] = ...
    nice_sized_int: _typing.Final[builtins.int] = ...
    big_int: _typing.Final[builtins.int] = ...
    real: _typing.Final[builtins.float] = ...
    smaller_real: _typing.Final[builtins.float] = ...
    hidden_field: _typing.Final[builtins.int] = ...
    something: _typing.Final[_typing.Mapping[builtins.int, builtins.int]] = ...
    opt_default_int: _typing.Final[_typing.Optional[builtins.int]] = ...
    opt_default_str: _typing.Final[_typing.Optional[builtins.str]] = ...
    opt_default_enum: _typing.Final[_typing.Optional[_fbthrift_AnEnum]] = ...
    def __init__(
        self, *,
        is_on: _typing.Optional[builtins.bool]=...,
        tiny_int: _typing.Optional[builtins.int]=...,
        small_int: _typing.Optional[builtins.int]=...,
        nice_sized_int: _typing.Optional[builtins.int]=...,
        big_int: _typing.Optional[builtins.int]=...,
        real: _typing.Optional[builtins.float]=...,
        smaller_real: _typing.Optional[builtins.float]=...,
        hidden_field: _typing.Optional[builtins.int]=...,
        something: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        opt_default_int: _typing.Optional[builtins.int]=...,
        opt_default_str: _typing.Optional[builtins.str]=...,
        opt_default_enum: _typing.Optional[_fbthrift_AnEnum]=...
    ) -> None: ...

    def __call__(
        self, *,
        is_on: _typing.Optional[builtins.bool]=...,
        tiny_int: _typing.Optional[builtins.int]=...,
        small_int: _typing.Optional[builtins.int]=...,
        nice_sized_int: _typing.Optional[builtins.int]=...,
        big_int: _typing.Optional[builtins.int]=...,
        real: _typing.Optional[builtins.float]=...,
        smaller_real: _typing.Optional[builtins.float]=...,
        hidden_field: _typing.Optional[builtins.int]=...,
        something: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        opt_default_int: _typing.Optional[builtins.int]=...,
        opt_default_str: _typing.Optional[builtins.str]=...,
        opt_default_enum: _typing.Optional[_fbthrift_AnEnum]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.bool, builtins.int, builtins.int, builtins.int, builtins.int, builtins.float, builtins.float, builtins.int, _typing.Mapping[builtins.int, builtins.int], builtins.int, builtins.str, _fbthrift_AnEnum]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.SimpleStruct": ...  # type: ignore
    def _to_py3(self) -> "module.types.SimpleStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.SimpleStruct": ...  # type: ignore
_fbthrift_SimpleStruct = SimpleStruct

class HiddenTypeFieldsStruct(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.HiddenTypeFieldsStruct):
    field1: _typing.Final[_fbthrift_SimpleStruct] = ...
    field2: _typing.Final[_typing.Sequence[_fbthrift_SimpleStruct]] = ...
    field3: _typing.Final[_typing.Mapping[builtins.int, _fbthrift_SimpleStruct]] = ...
    def __init__(
        self, *,
        field1: _typing.Optional[_fbthrift_SimpleStruct]=...,
        field2: _typing.Optional[_typing.Sequence[_fbthrift_SimpleStruct]]=...,
        field3: _typing.Optional[_typing.Mapping[builtins.int, _fbthrift_SimpleStruct]]=...
    ) -> None: ...

    def __call__(
        self, *,
        field1: _typing.Optional[_fbthrift_SimpleStruct]=...,
        field2: _typing.Optional[_typing.Sequence[_fbthrift_SimpleStruct]]=...,
        field3: _typing.Optional[_typing.Mapping[builtins.int, _fbthrift_SimpleStruct]]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_SimpleStruct, _typing.Sequence[_fbthrift_SimpleStruct], _typing.Mapping[builtins.int, _fbthrift_SimpleStruct]]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.HiddenTypeFieldsStruct": ...  # type: ignore
    def _to_py3(self) -> "module.types.HiddenTypeFieldsStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.HiddenTypeFieldsStruct": ...  # type: ignore
_fbthrift_HiddenTypeFieldsStruct = HiddenTypeFieldsStruct

class AdaptedUnion(_fbthrift_python_types.Union, _fbthrift_python_abstract_types.AdaptedUnion):
    best: _typing.Final[builtins.int] = ...
    def __init__(
        self, *,
        best: _typing.Optional[builtins.int]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: AdaptedUnion.Type = ...
        best: AdaptedUnion.Type = ...

    class FbThriftUnionFieldEnum(enum.Enum):
        EMPTY: AdaptedUnion.FbThriftUnionFieldEnum = ...
        best: AdaptedUnion.FbThriftUnionFieldEnum = ...

    fbthrift_current_value: _typing.Final[_typing.Union[None, builtins.int]]
    fbthrift_current_field: _typing.Final[FbThriftUnionFieldEnum]
    @classmethod
    def fromValue(cls, value: _typing.Union[None, builtins.int]) -> AdaptedUnion: ...
    value: _typing.Final[_typing.Union[None, builtins.int]]
    type: _typing.Final[Type]
    def get_type(self) -> Type: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.AdaptedUnion": ...  # type: ignore
    def _to_py3(self) -> "module.types.AdaptedUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AdaptedUnion": ...  # type: ignore
_fbthrift_AdaptedUnion = AdaptedUnion

class HiddenException(_fbthrift_python_exceptions.GeneratedError, _fbthrift_python_abstract_types.HiddenException):
    test: _typing.Final[builtins.int] = ...
    def __init__(
        self, *,
        test: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.int]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.HiddenException": ...  # type: ignore
    def _to_py3(self) -> "module.types.HiddenException": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.HiddenException": ...  # type: ignore
_fbthrift_HiddenException = HiddenException

class ComplexStruct(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.ComplexStruct):
    structOne: _typing.Final[_fbthrift_SimpleStruct] = ...
    structTwo: _typing.Final[_fbthrift_SimpleStruct] = ...
    an_integer: _typing.Final[builtins.int] = ...
    name: _typing.Final[builtins.str] = ...
    an_enum: _typing.Final[_fbthrift_AnEnum] = ...
    some_bytes: _typing.Final[builtins.bytes] = ...
    sender: _typing.Final[builtins.str] = ...
    cdef_: _typing.Final[builtins.str] = ...
    bytes_with_cpp_type: _typing.Final[builtins.bytes] = ...
    def __init__(
        self, *,
        structOne: _typing.Optional[_fbthrift_SimpleStruct]=...,
        structTwo: _typing.Optional[_fbthrift_SimpleStruct]=...,
        an_integer: _typing.Optional[builtins.int]=...,
        name: _typing.Optional[builtins.str]=...,
        an_enum: _typing.Optional[_fbthrift_AnEnum]=...,
        some_bytes: _typing.Optional[builtins.bytes]=...,
        sender: _typing.Optional[builtins.str]=...,
        cdef_: _typing.Optional[builtins.str]=...,
        bytes_with_cpp_type: _typing.Optional[builtins.bytes]=...
    ) -> None: ...

    def __call__(
        self, *,
        structOne: _typing.Optional[_fbthrift_SimpleStruct]=...,
        structTwo: _typing.Optional[_fbthrift_SimpleStruct]=...,
        an_integer: _typing.Optional[builtins.int]=...,
        name: _typing.Optional[builtins.str]=...,
        an_enum: _typing.Optional[_fbthrift_AnEnum]=...,
        some_bytes: _typing.Optional[builtins.bytes]=...,
        sender: _typing.Optional[builtins.str]=...,
        cdef_: _typing.Optional[builtins.str]=...,
        bytes_with_cpp_type: _typing.Optional[builtins.bytes]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_SimpleStruct, _fbthrift_SimpleStruct, builtins.int, builtins.str, _fbthrift_AnEnum, builtins.bytes, builtins.str, builtins.str, builtins.bytes]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.ComplexStruct": ...  # type: ignore
    def _to_py3(self) -> "module.types.ComplexStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.ComplexStruct": ...  # type: ignore
_fbthrift_ComplexStruct = ComplexStruct

class BinaryUnion(_fbthrift_python_types.Union, _fbthrift_python_abstract_types.BinaryUnion):
    iobuf_val: _typing.Final[_fbthrift_iobuf.IOBuf] = ...
    def __init__(
        self, *,
        iobuf_val: _typing.Optional[_fbthrift_iobuf.IOBuf]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: BinaryUnion.Type = ...
        iobuf_val: BinaryUnion.Type = ...

    class FbThriftUnionFieldEnum(enum.Enum):
        EMPTY: BinaryUnion.FbThriftUnionFieldEnum = ...
        iobuf_val: BinaryUnion.FbThriftUnionFieldEnum = ...

    fbthrift_current_value: _typing.Final[_typing.Union[None, _fbthrift_iobuf.IOBuf]]
    fbthrift_current_field: _typing.Final[FbThriftUnionFieldEnum]
    @classmethod
    def fromValue(cls, value: _typing.Union[None, _fbthrift_iobuf.IOBuf]) -> BinaryUnion: ...
    value: _typing.Final[_typing.Union[None, _fbthrift_iobuf.IOBuf]]
    type: _typing.Final[Type]
    def get_type(self) -> Type: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.BinaryUnion": ...  # type: ignore
    def _to_py3(self) -> "module.types.BinaryUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.BinaryUnion": ...  # type: ignore
_fbthrift_BinaryUnion = BinaryUnion

class BinaryUnionStruct(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.BinaryUnionStruct):
    u: _typing.Final[_fbthrift_BinaryUnion] = ...
    def __init__(
        self, *,
        u: _typing.Optional[_fbthrift_BinaryUnion]=...
    ) -> None: ...

    def __call__(
        self, *,
        u: _typing.Optional[_fbthrift_BinaryUnion]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[_fbthrift_BinaryUnion]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.BinaryUnionStruct": ...  # type: ignore
    def _to_py3(self) -> "module.types.BinaryUnionStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.BinaryUnionStruct": ...  # type: ignore
_fbthrift_BinaryUnionStruct = BinaryUnionStruct

class CustomFields(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.CustomFields):
    bool_field: _typing.Final[builtins.bool] = ...
    integer_field: _typing.Final[builtins.int] = ...
    double_field: _typing.Final[builtins.float] = ...
    string_field: _typing.Final[builtins.str] = ...
    binary_field: _typing.Final[builtins.bytes] = ...
    list_field: _typing.Final[_typing.Sequence[builtins.int]] = ...
    set_field: _typing.Final[_typing.AbstractSet[builtins.int]] = ...
    map_field: _typing.Final[_typing.Mapping[builtins.int, builtins.int]] = ...
    struct_field: _typing.Final[_fbthrift_SimpleStruct] = ...
    def __init__(
        self, *,
        bool_field: _typing.Optional[builtins.bool]=...,
        integer_field: _typing.Optional[builtins.int]=...,
        double_field: _typing.Optional[builtins.float]=...,
        string_field: _typing.Optional[builtins.str]=...,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_typing.Sequence[builtins.int]]=...,
        set_field: _typing.Optional[_typing.AbstractSet[builtins.int]]=...,
        map_field: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        struct_field: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> None: ...

    def __call__(
        self, *,
        bool_field: _typing.Optional[builtins.bool]=...,
        integer_field: _typing.Optional[builtins.int]=...,
        double_field: _typing.Optional[builtins.float]=...,
        string_field: _typing.Optional[builtins.str]=...,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_typing.Sequence[builtins.int]]=...,
        set_field: _typing.Optional[_typing.AbstractSet[builtins.int]]=...,
        map_field: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        struct_field: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.bool, builtins.int, builtins.float, builtins.str, builtins.bytes, _typing.Sequence[builtins.int], _typing.AbstractSet[builtins.int], _typing.Mapping[builtins.int, builtins.int], _fbthrift_SimpleStruct]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.CustomFields": ...  # type: ignore
    def _to_py3(self) -> "module.types.CustomFields": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CustomFields": ...  # type: ignore
_fbthrift_CustomFields = CustomFields

class CustomTypedefFields(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.CustomTypedefFields):
    bool_field: _typing.Final[builtins.bool] = ...
    integer_field: _typing.Final[builtins.int] = ...
    double_field: _typing.Final[builtins.float] = ...
    string_field: _typing.Final[builtins.str] = ...
    binary_field: _typing.Final[builtins.bytes] = ...
    list_field: _typing.Final[_typing.Sequence[builtins.int]] = ...
    set_field: _typing.Final[_typing.AbstractSet[builtins.int]] = ...
    map_field: _typing.Final[_typing.Mapping[builtins.int, builtins.int]] = ...
    struct_field: _typing.Final[_fbthrift_SimpleStruct] = ...
    def __init__(
        self, *,
        bool_field: _typing.Optional[builtins.bool]=...,
        integer_field: _typing.Optional[builtins.int]=...,
        double_field: _typing.Optional[builtins.float]=...,
        string_field: _typing.Optional[builtins.str]=...,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_typing.Sequence[builtins.int]]=...,
        set_field: _typing.Optional[_typing.AbstractSet[builtins.int]]=...,
        map_field: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        struct_field: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> None: ...

    def __call__(
        self, *,
        bool_field: _typing.Optional[builtins.bool]=...,
        integer_field: _typing.Optional[builtins.int]=...,
        double_field: _typing.Optional[builtins.float]=...,
        string_field: _typing.Optional[builtins.str]=...,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_typing.Sequence[builtins.int]]=...,
        set_field: _typing.Optional[_typing.AbstractSet[builtins.int]]=...,
        map_field: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        struct_field: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.bool, builtins.int, builtins.float, builtins.str, builtins.bytes, _typing.Sequence[builtins.int], _typing.AbstractSet[builtins.int], _typing.Mapping[builtins.int, builtins.int], _fbthrift_SimpleStruct]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.CustomTypedefFields": ...  # type: ignore
    def _to_py3(self) -> "module.types.CustomTypedefFields": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.CustomTypedefFields": ...  # type: ignore
_fbthrift_CustomTypedefFields = CustomTypedefFields

class AdaptedTypedefFields(_fbthrift_python_types.Struct, _fbthrift_python_abstract_types.AdaptedTypedefFields):
    bool_field: _typing.Final[builtins.bool] = ...
    integer_field: _typing.Final[builtins.int] = ...
    double_field: _typing.Final[builtins.float] = ...
    string_field: _typing.Final[builtins.str] = ...
    binary_field: _typing.Final[builtins.bytes] = ...
    list_field: _typing.Final[_typing.Sequence[builtins.int]] = ...
    set_field: _typing.Final[_typing.AbstractSet[builtins.int]] = ...
    map_field: _typing.Final[_typing.Mapping[builtins.int, builtins.int]] = ...
    struct_field: _typing.Final[_fbthrift_SimpleStruct] = ...
    def __init__(
        self, *,
        bool_field: _typing.Optional[builtins.bool]=...,
        integer_field: _typing.Optional[builtins.int]=...,
        double_field: _typing.Optional[builtins.float]=...,
        string_field: _typing.Optional[builtins.str]=...,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_typing.Sequence[builtins.int]]=...,
        set_field: _typing.Optional[_typing.AbstractSet[builtins.int]]=...,
        map_field: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        struct_field: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> None: ...

    def __call__(
        self, *,
        bool_field: _typing.Optional[builtins.bool]=...,
        integer_field: _typing.Optional[builtins.int]=...,
        double_field: _typing.Optional[builtins.float]=...,
        string_field: _typing.Optional[builtins.str]=...,
        binary_field: _typing.Optional[builtins.bytes]=...,
        list_field: _typing.Optional[_typing.Sequence[builtins.int]]=...,
        set_field: _typing.Optional[_typing.AbstractSet[builtins.int]]=...,
        map_field: _typing.Optional[_typing.Mapping[builtins.int, builtins.int]]=...,
        struct_field: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[builtins.str, _typing.Union[builtins.bool, builtins.int, builtins.float, builtins.str, builtins.bytes, _typing.Sequence[builtins.int], _typing.AbstractSet[builtins.int], _typing.Mapping[builtins.int, builtins.int], _fbthrift_SimpleStruct]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_mutable_python(self) -> "module.thrift_mutable_types.AdaptedTypedefFields": ...  # type: ignore
    def _to_py3(self) -> "module.types.AdaptedTypedefFields": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.AdaptedTypedefFields": ...  # type: ignore
_fbthrift_AdaptedTypedefFields = AdaptedTypedefFields


A_BOOL: builtins.bool = ...

A_BYTE: builtins.int = ...

THE_ANSWER: builtins.int = ...

A_NUMBER: builtins.int = ...

A_BIG_NUMBER: builtins.int = ...

A_REAL_NUMBER: builtins.float = ...

A_FAKE_NUMBER: builtins.float = ...

A_WORD: builtins.str = ...

SOME_BYTES: builtins.bytes = ...

A_STRUCT: _fbthrift_SimpleStruct = ...

EMPTY: _fbthrift_SimpleStruct = ...

WORD_LIST: _typing.Sequence[builtins.str] = ...

SOME_MAP: _typing.Sequence[_typing.Mapping[builtins.int, builtins.float]] = ...

DIGITS: _typing.AbstractSet[builtins.int] = ...

A_CONST_MAP: _typing.Mapping[builtins.str, _fbthrift_SimpleStruct] = ...

ANOTHER_CONST_MAP: _typing.Mapping[_fbthrift_AnEnumRenamed, builtins.int] = ...

IOBufPtr = _fbthrift_iobuf.IOBuf
IOBuf = _fbthrift_iobuf.IOBuf
AdaptedTypeDef = _fbthrift_SimpleStruct
HiddenTypeDef = _fbthrift_SimpleStruct
ImplicitlyHiddenTypeDef = _fbthrift_AdaptedUnion
foo_bar = builtins.bytes
CustomBool = builtins.bool
CustomInteger = builtins.int
CustomDouble = builtins.float
CustomString = builtins.str
CustomBinary = builtins.bytes
CustomList = _typing.List[builtins.int]
CustomSet = _typing.Set[builtins.int]
CustomMap = _typing.Dict[builtins.int, builtins.int]
CustomStruct = _fbthrift_SimpleStruct
AdaptedBool = builtins.bool
AdaptedInteger = builtins.int
AdaptedDouble = builtins.float
AdaptedString = builtins.str
AdaptedBinary = builtins.bytes
AdaptedList = _typing.List[builtins.int]
AdaptedSet = _typing.Set[builtins.int]
AdaptedMap = _typing.Dict[builtins.int, builtins.int]
AdaptedStruct = _fbthrift_SimpleStruct


class _fbthrift_SimpleService_get_five_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_SimpleService_get_five_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_add_five_args(_fbthrift_python_types.Struct):
    num: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        num: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_SimpleService_add_five_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_do_nothing_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_SimpleService_do_nothing_result(_fbthrift_python_types.Struct):
    success: _typing.Final[None]

    def __init__(
        self, *, success: _typing.Optional[None] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            None,
        ]]]: ...


class _fbthrift_SimpleService_concat_args(_fbthrift_python_types.Struct):
    first: _typing.Final[builtins.str] = ...
    second: _typing.Final[builtins.str] = ...

    def __init__(
        self, *,
        first: _typing.Optional[builtins.str]=...,
        second: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.str, builtins.str]]]: ...


class _fbthrift_SimpleService_concat_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.str]

    def __init__(
        self, *, success: _typing.Optional[builtins.str] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.str,
        ]]]: ...


class _fbthrift_SimpleService_get_value_args(_fbthrift_python_types.Struct):
    simple_struct: _typing.Final[_fbthrift_SimpleStruct] = ...

    def __init__(
        self, *,
        simple_struct: _typing.Optional[_fbthrift_SimpleStruct]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_SimpleStruct]]]: ...


class _fbthrift_SimpleService_get_value_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_negate_args(_fbthrift_python_types.Struct):
    input: _typing.Final[builtins.bool] = ...

    def __init__(
        self, *,
        input: _typing.Optional[builtins.bool]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.bool]]]: ...


class _fbthrift_SimpleService_negate_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.bool]

    def __init__(
        self, *, success: _typing.Optional[builtins.bool] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.bool,
        ]]]: ...


class _fbthrift_SimpleService_tiny_args(_fbthrift_python_types.Struct):
    input: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        input: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_SimpleService_tiny_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_small_args(_fbthrift_python_types.Struct):
    input: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        input: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_SimpleService_small_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_big_args(_fbthrift_python_types.Struct):
    input: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        input: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_SimpleService_big_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_two_args(_fbthrift_python_types.Struct):
    input: _typing.Final[builtins.float] = ...

    def __init__(
        self, *,
        input: _typing.Optional[builtins.float]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.float]]]: ...


class _fbthrift_SimpleService_two_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.float]

    def __init__(
        self, *, success: _typing.Optional[builtins.float] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.float,
        ]]]: ...


class _fbthrift_SimpleService_expected_exception_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_SimpleService_expected_exception_result(_fbthrift_python_types.Struct):
    success: _typing.Final[None]
    se: _typing.Final[_fbthrift_SimpleException]

    def __init__(
        self, *, success: _typing.Optional[None] = ..., _ex0__se: _typing.Optional[_fbthrift_SimpleException]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            None,
            _fbthrift_SimpleException,
        ]]]: ...


class _fbthrift_SimpleService_unexpected_exception_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_SimpleService_unexpected_exception_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_sum_i16_list_args(_fbthrift_python_types.Struct):
    numbers: _typing.Final[_typing.Sequence[builtins.int]] = ...

    def __init__(
        self, *,
        numbers: _typing.Optional[_typing.Sequence[builtins.int]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.int]]]]: ...


class _fbthrift_SimpleService_sum_i16_list_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_sum_i32_list_args(_fbthrift_python_types.Struct):
    numbers: _typing.Final[_typing.Sequence[builtins.int]] = ...

    def __init__(
        self, *,
        numbers: _typing.Optional[_typing.Sequence[builtins.int]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.int]]]]: ...


class _fbthrift_SimpleService_sum_i32_list_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_sum_i64_list_args(_fbthrift_python_types.Struct):
    numbers: _typing.Final[_typing.Sequence[builtins.int]] = ...

    def __init__(
        self, *,
        numbers: _typing.Optional[_typing.Sequence[builtins.int]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.int]]]]: ...


class _fbthrift_SimpleService_sum_i64_list_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_concat_many_args(_fbthrift_python_types.Struct):
    words: _typing.Final[_typing.Sequence[builtins.str]] = ...

    def __init__(
        self, *,
        words: _typing.Optional[_typing.Sequence[builtins.str]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.str]]]]: ...


class _fbthrift_SimpleService_concat_many_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.str]

    def __init__(
        self, *, success: _typing.Optional[builtins.str] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.str,
        ]]]: ...


class _fbthrift_SimpleService_count_structs_args(_fbthrift_python_types.Struct):
    items: _typing.Final[_typing.Sequence[_fbthrift_SimpleStruct]] = ...

    def __init__(
        self, *,
        items: _typing.Optional[_typing.Sequence[_fbthrift_SimpleStruct]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[_fbthrift_SimpleStruct]]]]: ...


class _fbthrift_SimpleService_count_structs_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_sum_set_args(_fbthrift_python_types.Struct):
    numbers: _typing.Final[_typing.AbstractSet[builtins.int]] = ...

    def __init__(
        self, *,
        numbers: _typing.Optional[_typing.AbstractSet[builtins.int]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.AbstractSet[builtins.int]]]]: ...


class _fbthrift_SimpleService_sum_set_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_contains_word_args(_fbthrift_python_types.Struct):
    words: _typing.Final[_typing.AbstractSet[builtins.str]] = ...
    word: _typing.Final[builtins.str] = ...

    def __init__(
        self, *,
        words: _typing.Optional[_typing.AbstractSet[builtins.str]]=...,
        word: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.AbstractSet[builtins.str], builtins.str]]]: ...


class _fbthrift_SimpleService_contains_word_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.bool]

    def __init__(
        self, *, success: _typing.Optional[builtins.bool] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.bool,
        ]]]: ...


class _fbthrift_SimpleService_get_map_value_args(_fbthrift_python_types.Struct):
    words: _typing.Final[_typing.Mapping[builtins.str, builtins.str]] = ...
    key: _typing.Final[builtins.str] = ...

    def __init__(
        self, *,
        words: _typing.Optional[_typing.Mapping[builtins.str, builtins.str]]=...,
        key: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Mapping[builtins.str, builtins.str], builtins.str]]]: ...


class _fbthrift_SimpleService_get_map_value_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.str]

    def __init__(
        self, *, success: _typing.Optional[builtins.str] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.str,
        ]]]: ...


class _fbthrift_SimpleService_map_length_args(_fbthrift_python_types.Struct):
    items: _typing.Final[_typing.Mapping[builtins.str, _fbthrift_SimpleStruct]] = ...

    def __init__(
        self, *,
        items: _typing.Optional[_typing.Mapping[builtins.str, _fbthrift_SimpleStruct]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Mapping[builtins.str, _fbthrift_SimpleStruct]]]]: ...


class _fbthrift_SimpleService_map_length_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_sum_map_values_args(_fbthrift_python_types.Struct):
    items: _typing.Final[_typing.Mapping[builtins.str, builtins.int]] = ...

    def __init__(
        self, *,
        items: _typing.Optional[_typing.Mapping[builtins.str, builtins.int]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Mapping[builtins.str, builtins.int]]]]: ...


class _fbthrift_SimpleService_sum_map_values_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_complex_sum_i32_args(_fbthrift_python_types.Struct):
    counter: _typing.Final[_fbthrift_ComplexStruct] = ...

    def __init__(
        self, *,
        counter: _typing.Optional[_fbthrift_ComplexStruct]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_ComplexStruct]]]: ...


class _fbthrift_SimpleService_complex_sum_i32_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_repeat_name_args(_fbthrift_python_types.Struct):
    counter: _typing.Final[_fbthrift_ComplexStruct] = ...

    def __init__(
        self, *,
        counter: _typing.Optional[_fbthrift_ComplexStruct]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_ComplexStruct]]]: ...


class _fbthrift_SimpleService_repeat_name_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.str]

    def __init__(
        self, *, success: _typing.Optional[builtins.str] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.str,
        ]]]: ...


class _fbthrift_SimpleService_get_struct_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_SimpleService_get_struct_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_fbthrift_SimpleStruct]

    def __init__(
        self, *, success: _typing.Optional[_fbthrift_SimpleStruct] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _fbthrift_SimpleStruct,
        ]]]: ...


class _fbthrift_SimpleService_fib_args(_fbthrift_python_types.Struct):
    n: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        n: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_SimpleService_fib_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.Sequence[builtins.int]]

    def __init__(
        self, *, success: _typing.Optional[_typing.Sequence[builtins.int]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.Sequence[builtins.int],
        ]]]: ...


class _fbthrift_SimpleService_unique_words_args(_fbthrift_python_types.Struct):
    words: _typing.Final[_typing.Sequence[builtins.str]] = ...

    def __init__(
        self, *,
        words: _typing.Optional[_typing.Sequence[builtins.str]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.str]]]]: ...


class _fbthrift_SimpleService_unique_words_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.AbstractSet[builtins.str]]

    def __init__(
        self, *, success: _typing.Optional[_typing.AbstractSet[builtins.str]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.AbstractSet[builtins.str],
        ]]]: ...


class _fbthrift_SimpleService_words_count_args(_fbthrift_python_types.Struct):
    words: _typing.Final[_typing.Sequence[builtins.str]] = ...

    def __init__(
        self, *,
        words: _typing.Optional[_typing.Sequence[builtins.str]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.str]]]]: ...


class _fbthrift_SimpleService_words_count_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.Mapping[builtins.str, builtins.int]]

    def __init__(
        self, *, success: _typing.Optional[_typing.Mapping[builtins.str, builtins.int]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.Mapping[builtins.str, builtins.int],
        ]]]: ...


class _fbthrift_SimpleService_set_enum_args(_fbthrift_python_types.Struct):
    in_enum: _typing.Final[_fbthrift_AnEnum] = ...

    def __init__(
        self, *,
        in_enum: _typing.Optional[_fbthrift_AnEnum]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_AnEnum]]]: ...


class _fbthrift_SimpleService_set_enum_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_fbthrift_AnEnum]

    def __init__(
        self, *, success: _typing.Optional[_fbthrift_AnEnum] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _fbthrift_AnEnum,
        ]]]: ...


class _fbthrift_SimpleService_list_of_lists_args(_fbthrift_python_types.Struct):
    num_lists: _typing.Final[builtins.int] = ...
    num_items: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        num_lists: _typing.Optional[builtins.int]=...,
        num_items: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int, builtins.int]]]: ...


class _fbthrift_SimpleService_list_of_lists_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.Sequence[_typing.Sequence[builtins.int]]]

    def __init__(
        self, *, success: _typing.Optional[_typing.Sequence[_typing.Sequence[builtins.int]]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.Sequence[_typing.Sequence[builtins.int]],
        ]]]: ...


class _fbthrift_SimpleService_word_character_frequency_args(_fbthrift_python_types.Struct):
    sentence: _typing.Final[builtins.str] = ...

    def __init__(
        self, *,
        sentence: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.str]]]: ...


class _fbthrift_SimpleService_word_character_frequency_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.Mapping[builtins.str, _typing.Mapping[builtins.str, builtins.int]]]

    def __init__(
        self, *, success: _typing.Optional[_typing.Mapping[builtins.str, _typing.Mapping[builtins.str, builtins.int]]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.Mapping[builtins.str, _typing.Mapping[builtins.str, builtins.int]],
        ]]]: ...


class _fbthrift_SimpleService_list_of_sets_args(_fbthrift_python_types.Struct):
    some_words: _typing.Final[builtins.str] = ...

    def __init__(
        self, *,
        some_words: _typing.Optional[builtins.str]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.str]]]: ...


class _fbthrift_SimpleService_list_of_sets_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.Sequence[_typing.AbstractSet[builtins.str]]]

    def __init__(
        self, *, success: _typing.Optional[_typing.Sequence[_typing.AbstractSet[builtins.str]]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.Sequence[_typing.AbstractSet[builtins.str]],
        ]]]: ...


class _fbthrift_SimpleService_nested_map_argument_args(_fbthrift_python_types.Struct):
    struct_map: _typing.Final[_typing.Mapping[builtins.str, _typing.Sequence[_fbthrift_SimpleStruct]]] = ...

    def __init__(
        self, *,
        struct_map: _typing.Optional[_typing.Mapping[builtins.str, _typing.Sequence[_fbthrift_SimpleStruct]]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Mapping[builtins.str, _typing.Sequence[_fbthrift_SimpleStruct]]]]]: ...


class _fbthrift_SimpleService_nested_map_argument_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_SimpleService_make_sentence_args(_fbthrift_python_types.Struct):
    word_chars: _typing.Final[_typing.Sequence[_typing.Sequence[builtins.str]]] = ...

    def __init__(
        self, *,
        word_chars: _typing.Optional[_typing.Sequence[_typing.Sequence[builtins.str]]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[_typing.Sequence[builtins.str]]]]]: ...


class _fbthrift_SimpleService_make_sentence_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.str]

    def __init__(
        self, *, success: _typing.Optional[builtins.str] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.str,
        ]]]: ...


class _fbthrift_SimpleService_get_union_args(_fbthrift_python_types.Struct):
    sets: _typing.Final[_typing.Sequence[_typing.AbstractSet[builtins.int]]] = ...

    def __init__(
        self, *,
        sets: _typing.Optional[_typing.Sequence[_typing.AbstractSet[builtins.int]]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[_typing.AbstractSet[builtins.int]]]]]: ...


class _fbthrift_SimpleService_get_union_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.AbstractSet[builtins.int]]

    def __init__(
        self, *, success: _typing.Optional[_typing.AbstractSet[builtins.int]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.AbstractSet[builtins.int],
        ]]]: ...


class _fbthrift_SimpleService_get_keys_args(_fbthrift_python_types.Struct):
    string_map: _typing.Final[_typing.Sequence[_typing.Mapping[builtins.str, builtins.str]]] = ...

    def __init__(
        self, *,
        string_map: _typing.Optional[_typing.Sequence[_typing.Mapping[builtins.str, builtins.str]]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[_typing.Mapping[builtins.str, builtins.str]]]]]: ...


class _fbthrift_SimpleService_get_keys_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.AbstractSet[builtins.str]]

    def __init__(
        self, *, success: _typing.Optional[_typing.AbstractSet[builtins.str]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.AbstractSet[builtins.str],
        ]]]: ...


class _fbthrift_SimpleService_lookup_double_args(_fbthrift_python_types.Struct):
    key: _typing.Final[builtins.int] = ...

    def __init__(
        self, *,
        key: _typing.Optional[builtins.int]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.int]]]: ...


class _fbthrift_SimpleService_lookup_double_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.float]

    def __init__(
        self, *, success: _typing.Optional[builtins.float] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.float,
        ]]]: ...


class _fbthrift_SimpleService_retrieve_binary_args(_fbthrift_python_types.Struct):
    something: _typing.Final[builtins.bytes] = ...

    def __init__(
        self, *,
        something: _typing.Optional[builtins.bytes]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, builtins.bytes]]]: ...


class _fbthrift_SimpleService_retrieve_binary_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.bytes]

    def __init__(
        self, *, success: _typing.Optional[builtins.bytes] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.bytes,
        ]]]: ...


class _fbthrift_SimpleService_contain_binary_args(_fbthrift_python_types.Struct):
    binaries: _typing.Final[_typing.Sequence[builtins.bytes]] = ...

    def __init__(
        self, *,
        binaries: _typing.Optional[_typing.Sequence[builtins.bytes]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[builtins.bytes]]]]: ...


class _fbthrift_SimpleService_contain_binary_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.AbstractSet[builtins.bytes]]

    def __init__(
        self, *, success: _typing.Optional[_typing.AbstractSet[builtins.bytes]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.AbstractSet[builtins.bytes],
        ]]]: ...


class _fbthrift_SimpleService_contain_enum_args(_fbthrift_python_types.Struct):
    the_enum: _typing.Final[_typing.Sequence[_fbthrift_AnEnum]] = ...

    def __init__(
        self, *,
        the_enum: _typing.Optional[_typing.Sequence[_fbthrift_AnEnum]]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _typing.Sequence[_fbthrift_AnEnum]]]]: ...


class _fbthrift_SimpleService_contain_enum_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_typing.Sequence[_fbthrift_AnEnum]]

    def __init__(
        self, *, success: _typing.Optional[_typing.Sequence[_fbthrift_AnEnum]] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _typing.Sequence[_fbthrift_AnEnum],
        ]]]: ...


class _fbthrift_SimpleService_get_binary_union_struct_args(_fbthrift_python_types.Struct):
    u: _typing.Final[_fbthrift_BinaryUnion] = ...

    def __init__(
        self, *,
        u: _typing.Optional[_fbthrift_BinaryUnion]=...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None, _fbthrift_BinaryUnion]]]: ...


class _fbthrift_SimpleService_get_binary_union_struct_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_fbthrift_BinaryUnionStruct]

    def __init__(
        self, *, success: _typing.Optional[_fbthrift_BinaryUnionStruct] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _fbthrift_BinaryUnionStruct,
        ]]]: ...


class _fbthrift_SimpleService_get_struct_hidden_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_SimpleService_get_struct_hidden_result(_fbthrift_python_types.Struct):
    success: _typing.Final[_fbthrift_SimpleStruct]

    def __init__(
        self, *, success: _typing.Optional[_fbthrift_SimpleStruct] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            _fbthrift_SimpleStruct,
        ]]]: ...


class _fbthrift_DerivedService_get_six_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_DerivedService_get_six_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...


class _fbthrift_RederivedService_get_seven_args(_fbthrift_python_types.Struct):

    def __init__(
        self,
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[None]]]: ...


class _fbthrift_RederivedService_get_seven_result(_fbthrift_python_types.Struct):
    success: _typing.Final[builtins.int]

    def __init__(
        self, *, success: _typing.Optional[builtins.int] = ...
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[
        str,
        _typing.Union[
            builtins.int,
        ]]]: ...
