#line 2 "zend-ini.yy.cpp"

#line 4 "zend-ini.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 31
#define YY_END_OF_BUFFER 32
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[191] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   32,   11,   27,   28,
       28,   11,   18,   11,   11,   29,   12,   11,   11,   11,
       11,   11,    1,   22,   22,   31,   23,   31,   31,   22,
       22,   17,   16,   31,    5,   22,    3,   21,   26,   15,
       15,   19,   31,   21,   21,   17,   20,   16,   16,   16,
       16,   16,   16,   19,   14,   25,   24,   31,   25,    7,
        8,   13,   13,   11,    4,   27,   28,   28,   30,   29,
       12,   11,   11,   11,   30,   30,   30,    4,   29,   29,
       29,   12,   11,   10,   11,   11,    9,   11,   11,   22,

        0,    0,   22,   23,    5,   22,   22,    6,    0,   17,
       17,   17,   17,   16,   22,   22,    3,    3,    3,   21,
        0,   26,   15,   15,   19,   21,   17,   17,   17,   17,
       16,   16,   10,   16,   16,    9,   16,   16,   14,   25,
       24,   25,   25,    7,   13,   13,    4,    4,   11,   10,
       10,   11,   11,   10,    9,    9,   11,    9,   22,   22,
       22,    2,   17,   21,   21,   17,   16,   16,   16,   10,
       16,    9,   11,   10,   10,    9,   22,   22,   22,   22,
       21,   16,   10,   10,    9,   10,   22,   22,   10,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    6,   11,    6,
        6,   10,   10,   10,   12,   13,   10,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   10,   15,   10,
       16,   10,   10,   10,   17,   18,   18,   18,   19,   20,
       18,   18,   18,   18,   18,   21,   18,   22,   23,   18,
       18,   24,   25,   26,   27,   18,   18,   18,   28,   18,
       29,   30,   31,   32,   33,    1,   34,   18,   18,   18,

       35,   36,   18,   18,   18,   18,   18,   37,   18,   38,
       39,   18,   18,   40,   41,   42,   43,   18,   18,   18,
       44,   18,   45,    6,   46,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    3,    4,    2,    5,    1,    6,    1,
        7,    1,    1,    1,    8,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    9,    1,
       10,   11,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,   11,   12
    } ;

static yyconst flex_int16_t yy_base[213] =
    {   0,
        0,    0,   47,    0,   93,   94,  125,    0,  170,  172,
       93,  170,  202,  247,  178,  182,  393,  355,  101, 1111,
      361,  292, 1111,  320,  326,  104,  108,  161,  187,  199,
      167,  203, 1111,   88,  234, 1111, 1111,  168,    0,  185,
      231,  257,  366,  270, 1111,  250,  117,  337,  310, 1111,
      341,  109,  412,  269,  275,  277, 1111,  457,  503,  311,
      282,  313,  322,  218,    0,    0,  110,  297,  296,    0,
     1111,    0,  358,  304,  187,  384, 1111,  316,  264,  306,
      338,  548,  576,    0,  328, 1111,  285,  399,  355, 1111,
      279,  346,  348,  403,  400,  361,  378,  215,  381,  203,

      230,  432,  443, 1111, 1111,  361,  424, 1111,  258,  442,
      446,  450,  468,  622,  400,  488,  503, 1111,  243,  215,
      157,  521, 1111,  185,  444,  667,  297,  469,  470,  487,
      427,  493,  537,  523,  538,  564,  504,  559,    0,    0,
      489, 1111,    0,    0,    0,  584,  517,  592,  577,  541,
      607,  582,  604,  608,  560,  614,  585,  624,  630,  647,
      713, 1111,  631,   92,  743,  559,  625,  629,  663,  684,
      668,  691,  646,  702,  704,  708,  789,  649,  682,  819,
      693,  722,  760,  761,  765,  774,  681,  689,  767, 1111,
      850,  862,  874,  886,  898,  910,  922,  934,  946,  957,

      969,  981,  992, 1003, 1015, 1027, 1039, 1051, 1062, 1074,
     1086, 1098
    } ;

static yyconst flex_int16_t yy_def[213] =
    {   0,
      190,    1,  190,    3,    3,    3,  190,    7,  191,  191,
      192,  192,  193,  193,  194,  194,  190,  195,  190,  190,
      190,  195,  190,  196,  195,  197,  190,  195,  195,  195,
      195,  195,  190,  198,  198,  190,  190,  199,  200,  198,
      198,  198,  201,  198,  190,  198,  190,  202,  190,  190,
      190,  190,  202,  202,  202,  202,  190,  203,  203,   59,
       59,   59,   59,  202,  204,  205,  190,  206,  205,  207,
      190,  208,  208,  195,  190,  190,  190,  190,  209,  197,
      190,  195,  196,   83,  209,  190,  190,  209,  197,  190,
      190,  190,  195,  195,  195,  195,  195,  195,  195,  198,

      199,  198,  198,  190,  190,  198,  199,  190,  200,  198,
      198,  198,  198,  201,  198,  198,  190,  190,  190,  202,
       53,  190,  190,  190,  190,  210,  202,  202,  202,  202,
       59,   59,   59,   59,   59,   59,   59,   59,  204,  205,
      190,  190,  205,  207,  208,  208,  190,  209,  195,  190,
      195,  195,  195,  195,  190,  195,  195,  195,  198,  199,
      211,  190,  198,  202,  210,  202,   59,   59,   59,   59,
       59,   59,  195,  195,  195,  195,  212,  198,  199,  211,
      165,   59,   59,   59,   59,  195,  198,  198,   59,    0,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190
    } ;

static yyconst flex_int16_t yy_nxt[1159] =
    {   0,
       18,   19,   20,   21,   22,   23,   23,   24,   23,   25,
       25,   25,   25,   18,   26,   27,   18,   18,   18,   28,
       18,   29,   30,   18,   18,   31,   18,   32,   33,   18,
       25,   23,   18,   18,   18,   28,   18,   29,   30,   18,
       18,   31,   18,   32,   23,   23,   18,   34,   35,   36,
       36,   35,   34,   37,   34,   38,   34,   39,   40,   41,
       42,   36,   34,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   34,   44,   45,   34,   34,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   34,   34,   34,   46,   46,  101,   46,   46,   67,

      121,   68,   76,   77,   78,   76,   90,   91,   79,   92,
      125,  141,   92,  125,  141,   80,   81,  102,  117,  118,
      119,  117,   69,   47,   47,   48,   49,   50,   51,   49,
       52,   37,   48,   53,   48,   39,   54,   55,   56,   26,
       57,   58,   58,   58,   59,   58,   60,   61,   58,   58,
       62,   58,   63,   48,   48,   48,   64,   48,   58,   58,
       59,   58,   60,   61,   58,   58,   62,   58,   63,   48,
       48,   36,   36,   36,   36,   36,   67,   93,   68,   73,
       50,   51,   73,   73,   50,   51,   73,  123,  147,   75,
       98,  147,   26,  101,   93,   75,   26,  107,  110,   69,

       47,  190,   47,   36,   36,   36,   98,   36,   36,   94,
       36,  101,  108,   95,  102,   75,   36,   36,   96,  125,
       97,   99,  125,  121,   36,   94,  121,   75,   36,   95,
       36,   75,  102,   36,   96,  103,   97,   99,  103,  101,
      104,  157,  101,   75,  111,  118,   36,   71,   36,   36,
       36,  116,   36,   36,  116,   36,  104,  157,  101,  107,
      102,   36,   36,  102,  105,  101,   86,   87,  162,  112,
      113,  115,  100,  100,  190,   36,  100,  121,   36,  102,
      100,   90,  127,  121,  100,  121,  102,   86,  128,  129,
      130,   36,   71,   76,   77,   78,   82,  143,  131,   83,

      100,  135,  142,  136,  142,  121,   80,   81,   90,   91,
      127,  122,  123,  124,  122,  131,  104,  135,   77,  136,
       75,   85,   86,   87,   80,   85,   85,  131,   85,  131,
       86,   87,   75,  133,   85,   85,  137,  134,  131,   92,
      138,  108,   92,  123,  131,  121,  131,   92,   88,  133,
       92,   85,  137,  134,   75,  131,  138,   90,   91,  146,
      123,  124,  146,   77,   85,   85,  100,  100,  149,  101,
      100,  100,   80,  100,  101,  100,   75,  100,  100,  155,
      154,  100,  156,   75,  149,   76,   77,   78,   76,   75,
      102,   79,  190,  190,  100,  102,  154,  100,   80,   81,

      148,   86,   87,  148,  150,  158,   75,  151,  101,   75,
      100,  100,  100,  120,  120,  120,  120,  120,  120,  190,
      153,  158,  120,  190,  152,  159,  120,  120,   75,  102,
      190,   75,  160,  115,  100,  100,  153,  190,  100,  190,
      152,  126,  100,  131,  103,  125,  100,  103,  125,  104,
      101,  101,  190,  161,  101,  110,  108,  120,  101,  111,
      131,  190,  100,  163,  120,  121,  120,  190,  120,  120,
      106,  102,  102,  105,  190,  102,  101,  121,  121,  102,
      112,  113,  128,  166,  190,  120,  120,  120,  120,  116,
      141,  190,  116,  141,  104,  121,  101,  102,  190,  129,

      130,  120,  120,  120,  117,  118,  119,  117,  190,  131,
      120,  121,  120,  167,  120,  120,  190,  102,  147,  132,
      131,  147,  122,  123,  124,  122,  131,  104,  190,  167,
      171,  120,  120,  120,  120,   80,  132,  131,  150,  131,
      190,  150,  150,  169,  190,  150,  171,  120,  120,   76,
       77,   78,   82,  131,  131,   83,  131,  170,  168,  169,
      190,  155,   80,   81,  155,  155,  190,  121,  155,  190,
      131,  131,  166,  170,  168,  131,   75,   85,   86,   87,
      131,   85,   85,  172,   85,  146,  123,  124,  146,  190,
       85,   85,  131,  148,   86,   87,  148,  131,   80,  172,

      174,  173,  190,  176,   88,   75,  190,   85,  150,  150,
       75,  151,  151,   75,  190,  155,  174,  173,  156,  176,
       85,   85,  100,  100,  175,  155,  100,  100,  156,  100,
      101,  100,   75,  100,  100,   75,   75,  100,  101,  101,
      175,  131,   75,  190,  163,  131,  190,  183,  190,  182,
      100,  102,   75,  100,  190,  160,  190,  101,  131,  102,
      102,  190,  131,  183,  186,  182,  100,  100,  100,  120,
      120,  120,  120,  120,   75,  165,  177,  120,  102,  131,
      186,  120,  120,  184,  131,  150,  185,  190,  150,  101,
      160,  100,  155,  100,  164,  155,  131,  101,  190,  184,

      131,  131,  185,  150,  190,  150,  151,  131,  151,  155,
      102,  177,  156,  120,  178,  100,  100,  131,  102,  100,
      190,  179,  164,  100,  131,  190,  100,  100,  100,  190,
       75,  190,   75,  190,  190,  190,   75,  164,  131,  120,
      189,  190,  180,  100,  120,  120,  120,  120,  120,  120,
      190,  165,  190,  120,  190,  131,  189,  120,  120,  190,
      190,  150,  150,  190,  150,  150,  155,  190,  150,  155,
      190,  150,  181,  190,  190,  150,  131,  131,  151,  190,
      190,  131,  190,  131,  190,  190,  190,  120,  190,  190,
      188,  106,  106,  131,  131,  106,  190,  160,  131,  106,

      131,  190,   75,  106,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  161,  106,
      178,  100,  100,  190,  190,  100,  190,  179,  190,  100,
      190,  190,  190,  100,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  180,  100,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   74,  190,

      190,   74,  190,  190,   74,  190,   74,   74,  190,   74,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,  190,  100,  190,  100,
      190,  190,  100,  190,  100,  100,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  109,  109,  109,
      109,  109,  109,  190,  109,  109,  109,  109,  109,  114,
      114,  190,  114,  190,  114,  190,  190,  114,  190,  114,
      114,  120,  190,  190,  190,  190,  120,  190,  190,  120,
      120,  120,  131,  190,  190,  190,  190,  131,  190,  190,

      131,  131,  131,  139,  139,  190,  139,  139,  139,  139,
      139,  139,  190,  139,  139,  140,  140,  140,  140,  190,
      190,  140,  140,  140,  140,  140,  140,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  144,
      190,  190,  144,  190,  190,  144,  190,  190,  144,  190,
      144,  145,  145,  190,  145,  145,  145,  145,  190,  145,
      145,  145,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
       17,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190
    } ;

static yyconst flex_int16_t yy_chk[1159] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    6,   34,    5,    6,   11,

      164,   11,   19,   19,   19,   19,   26,   26,   19,   27,
       52,   67,   27,   52,   67,   19,   19,   34,   47,   47,
       47,   47,   11,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,    9,   10,   10,   12,   28,   12,   15,
       15,   15,   15,   16,   16,   16,   16,  124,   75,   28,
       31,   75,   15,   40,   28,   31,   16,   38,   40,   12,

        9,  121,   10,   13,   13,   13,   31,   13,   13,   29,
       13,  100,   38,   29,   40,   29,   13,   13,   30,   64,
       30,   32,   64,  120,   15,   29,   64,   30,   16,   29,
       13,   32,  100,   13,   30,   35,   30,   32,   35,   41,
       35,   98,   35,   98,   41,  119,   13,   13,   14,   14,
       14,   46,   14,   14,   46,   14,   46,   98,   46,  101,
       41,   14,   14,   35,   35,   42,   79,   79,  109,   42,
       42,   44,   44,   44,  101,   14,   44,   54,   14,   46,
       44,   91,   54,   55,   44,   56,   42,   87,   55,   56,
       56,   14,   14,   22,   22,   22,   22,   69,   61,   22,

       44,   61,   69,   61,   69,  127,   22,   22,   80,   80,
      127,   49,   49,   49,   49,   61,   49,   61,   78,   61,
       22,   24,   24,   24,   49,   24,   24,   60,   24,   62,
       85,   85,   74,   60,   24,   24,   62,   60,   63,   81,
       63,   68,   81,   51,   60,   48,   62,   92,   24,   60,
       92,   24,   62,   60,   25,   63,   63,   89,   89,   73,
       73,   73,   73,   21,   24,   24,   43,   43,   93,  106,
       43,   43,   73,   43,   43,   43,   93,   43,   43,   97,
       96,   43,   97,   18,   93,   76,   76,   76,   76,   96,
      106,   76,   17,    0,   43,   43,   96,   43,   76,   76,

       88,   88,   88,   88,   94,   99,   97,   94,  115,   99,
       43,   43,   43,   53,   53,   53,   53,   53,   53,    0,
       95,   99,   53,    0,   94,  107,   53,   53,   95,  115,
        0,   94,  107,  102,  102,  102,   95,    0,  102,    0,
       94,   53,  102,  131,  103,  125,  102,  103,  125,  103,
      110,  103,    0,  107,  111,  110,   53,   58,  112,  111,
      131,    0,  102,  112,   58,   58,   58,    0,   58,   58,
      107,  110,  103,  103,    0,  111,  113,  128,  129,  112,
      113,  113,  128,  129,    0,   58,   58,   58,   58,  116,
      141,    0,  116,  141,  116,  130,  116,  113,    0,  130,

      130,   58,   58,   59,  117,  117,  117,  117,    0,  132,
       59,   59,   59,  132,   59,   59,    0,  116,  147,   59,
      137,  147,  122,  122,  122,  122,  132,  122,    0,  132,
      137,   59,   59,   59,   59,  122,   59,  137,  133,  134,
        0,  133,  150,  134,    0,  150,  137,   59,   59,   82,
       82,   82,   82,  133,  135,   82,  134,  135,  133,  134,
        0,  155,   82,   82,  155,  136,    0,  166,  136,    0,
      133,  135,  166,  135,  133,  138,   82,   83,   83,   83,
      136,   83,   83,  138,   83,  146,  146,  146,  146,    0,
       83,   83,  138,  148,  148,  148,  148,  136,  146,  138,

      152,  149,    0,  157,   83,  149,    0,   83,  151,  154,
      152,  151,  154,  157,    0,  156,  152,  149,  156,  157,
       83,   83,  114,  114,  153,  158,  114,  114,  158,  114,
      114,  114,  153,  114,  114,  151,  154,  114,  159,  163,
      153,  167,  156,    0,  163,  168,    0,  168,    0,  167,
      114,  114,  158,  114,    0,  160,    0,  178,  167,  159,
      163,    0,  168,  168,  173,  167,  114,  114,  114,  126,
      126,  126,  126,  126,  173,  126,  160,  126,  178,  169,
      173,  126,  126,  169,  171,  170,  171,    0,  170,  187,
      179,  160,  172,  160,  181,  172,  169,  188,    0,  169,

      170,  171,  171,  174,    0,  175,  174,  172,  175,  176,
      187,  179,  176,  126,  161,  161,  161,  170,  188,  161,
        0,  161,  181,  161,  172,    0,  179,  161,  179,    0,
      174,    0,  175,    0,    0,    0,  176,  181,  182,  181,
      182,    0,  161,  161,  165,  165,  165,  165,  165,  165,
        0,  165,    0,  165,    0,  182,  182,  165,  165,    0,
        0,  183,  184,    0,  183,  184,  185,    0,  189,  185,
        0,  189,  165,    0,    0,  186,  183,  184,  186,    0,
        0,  185,    0,  189,    0,    0,    0,  165,    0,  165,
      177,  177,  177,  183,  184,  177,    0,  177,  185,  177,

      189,    0,  186,  177,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  177,  177,
      180,  180,  180,    0,    0,  180,    0,  180,    0,  180,
        0,    0,    0,  180,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  180,  180,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  195,    0,

        0,  195,    0,    0,  195,    0,  195,  195,    0,  195,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  198,  198,    0,  198,    0,  198,
        0,    0,  198,    0,  198,  198,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  200,  200,  200,
      200,  200,  200,    0,  200,  200,  200,  200,  200,  201,
      201,    0,  201,    0,  201,    0,    0,  201,    0,  201,
      201,  202,    0,    0,    0,    0,  202,    0,    0,  202,
      202,  202,  203,    0,    0,    0,    0,  203,    0,    0,

      203,  203,  203,  204,  204,    0,  204,  204,  204,  204,
      204,  204,    0,  204,  204,  205,  205,  205,  205,    0,
        0,  205,  205,  205,  205,  205,  205,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  207,
        0,    0,  207,    0,    0,  207,    0,    0,  207,    0,
      207,  208,  208,    0,  208,  208,  208,  208,    0,  208,
      208,  208,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "zend-ini.ll"
#line 2 "zend-ini.ll"
/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1998-2010 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
*/

#include <errno.h>
#include "hphp/runtime/base/ini-parser/zend-ini.tab.hpp"
#include "hphp/runtime/base/ini-parser/zend-ini.h"
#include "hphp/runtime/base/string-buffer.h"
#include "hphp/runtime/base/ini-setting.h"
#include "hphp/util/logger.h"

using namespace HPHP;

/* Globals Macros */
struct ZendINIGlobals {
  int scanner_mode;
  std::string filename;
  int lineno;
  IniSetting::PFN_PARSER_CALLBACK callback;
  void *arg;
  YY_BUFFER_STATE state;
};
static ZendINIGlobals s_zend_ini;
#define SCNG(v) s_zend_ini.v

/* Eat leading whitespace */
#define EAT_LEADING_WHITESPACE() \
  while (yytext[0]) {                             \
    if (yytext[0] == ' ' || yytext[0] == '\t') {  \
      yytext++;                                   \
      yyleng--;                                   \
    } else {                                      \
      break;                                      \
    }                                             \
  }

/* Eat trailing whitespace + extra char */
#define EAT_TRAILING_WHITESPACE_EX(ch)            \
  while (yyleng > 0 && (                          \
    (ch != 'X' && yytext[yyleng - 1] ==  ch) ||   \
    yytext[yyleng - 1] == '\n' ||                 \
    yytext[yyleng - 1] == '\r' ||                 \
    yytext[yyleng - 1] == '\t' ||                 \
    yytext[yyleng - 1] == ' ')                    \
  ) {                                             \
    yyleng--;                                     \
  }

/* Eat trailing whitespace */
#define EAT_TRAILING_WHITESPACE()  EAT_TRAILING_WHITESPACE_EX('X')

#define RETURN_TOKEN(type, str, len) {            \
  *ini_lval = String(str, len, CopyString);       \
  return type;                                    \
}

static void zend_ini_escape_string(String &lval, char *str, int len,
                                   char quote_type) {
  register char *s, *t;
  char *end;

  String sval(str, len, CopyString);
  lval = sval;

  /* convert escape sequences */
  s = t = (char*)sval.data();
  end = s + sval.size();

  int length = sval.size();

  while (s < end) {
    if (*s == '\\') {
      s++;
      if (s >= end) {
        *t++ = '\\';
        continue;
      }
      switch (*s) {
        case '"':
          if (*s != quote_type) {
            *t++ = '\\';
            *t++ = *s;
            break;
          }
          /* fallthrough */
        case '\\':
        case '$':
          *t++ = *s;
          length--;
          break;
        default:
          *t++ = '\\';
          *t++ = *s;
          break;
      }
    } else {
      *t++ = *s;
    }
    if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
      SCNG(lineno)++;
    }
    s++;
  }
  *t = 0;

  if (length != lval.size()) {
    lval.setSize(length);
  }
}

#define YY_USE_PROTOS
#define YY_DECL int ini_lex_impl(String *ini_lval, void *loc)

#define GOTO_RESTART 9999

int ini_lex_impl(String *ini_lval, void *loc);
int ini_lex(String *ini_lval, void *loc) {
restart:
  int ret = ini_lex_impl(ini_lval, loc);
  if (ret == GOTO_RESTART) goto restart;
  return ret;
}








#line 927 "zend-ini.yy.cpp"

#define INITIAL 0
#define ST_OFFSET 1
#define ST_SECTION_VALUE 2
#define ST_VALUE 3
#define ST_SECTION_RAW 4
#define ST_DOUBLE_QUOTES 5
#define ST_VARNAME 6
#define ST_RAW 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 172 "zend-ini.ll"


#line 1134 "zend-ini.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 191 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1111 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 174 "zend-ini.ll"
{
/* Section start */
  /* Enter section data lookup state */
  if (SCNG(scanner_mode) == IniSetting::RawScanner) {
    yy_push_state(ST_SECTION_RAW);
  } else {
    yy_push_state(ST_SECTION_VALUE);
  }
  return TC_SECTION;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 185 "zend-ini.ll"
{
/* Raw string */
  /* Eat leading and trailing single quotes */
  if (yytext[0] == '\'' && yytext[yyleng - 1] == '\'') {
    yytext++;
    yyleng = yyleng - 2;
  }
  RETURN_TOKEN(TC_RAW, yytext, yyleng);
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 195 "zend-ini.ll"
{
/* End of section */
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return ']';
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 202 "zend-ini.ll"
{
/* Start of option with offset */
  /* Eat leading whitespace */
  EAT_LEADING_WHITESPACE();

  /* Eat trailing whitespace and [ */
  EAT_TRAILING_WHITESPACE_EX('[');

  /* Enter offset lookup state */
  yy_push_state(ST_OFFSET);

  RETURN_TOKEN(TC_OFFSET, yytext, yyleng);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 216 "zend-ini.ll"
{
/* End of section or an option offset */
  BEGIN(INITIAL);
  return ']';
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 222 "zend-ini.ll"
{
/* Variable start */
  yy_push_state(ST_VARNAME);
  return TC_DOLLAR_CURLY;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 228 "zend-ini.ll"
{
/* Variable name */
  /* Eat leading whitespace */
  EAT_LEADING_WHITESPACE();

  /* Eat trailing whitespace */
  EAT_TRAILING_WHITESPACE();

  RETURN_TOKEN(TC_VARNAME, yytext, yyleng);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 239 "zend-ini.ll"
{ /* Variable end */
  yy_pop_state();
  return '}';
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 244 "zend-ini.ll"
{
/* TRUE value (when used outside option value/offset this causes error!) */
  RETURN_TOKEN(BOOL_TRUE, "1", 1);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 249 "zend-ini.ll"
{
/* FALSE value (when used outside option value/offset this causes error!)*/
  RETURN_TOKEN(BOOL_FALSE, "", 0);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 254 "zend-ini.ll"
{
/* Get option name */
  /* Eat leading whitespace */
  EAT_LEADING_WHITESPACE();

  /* Eat trailing whitespace */
  EAT_TRAILING_WHITESPACE();

  RETURN_TOKEN(TC_LABEL, yytext, yyleng);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 265 "zend-ini.ll"
{
/* Start option value */
  if (SCNG(scanner_mode) == IniSetting::RawScanner) {
    yy_push_state(ST_RAW);
  } else {
    yy_push_state(ST_VALUE);
  }
  return '=';
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 275 "zend-ini.ll"
{
/* Raw value, only used when SCNG(scanner_mode) == IniSetting::RawScanner. */
  /* Eat leading and trailing double quotes */
  if (yytext[0] == '"' && yytext[yyleng - 1] == '"') {
    yytext++;
    yyleng = yyleng - 2;
  }
  RETURN_TOKEN(TC_RAW, yytext, yyleng);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 285 "zend-ini.ll"
{
/* Raw value, only used when SCNG(scanner_mode) == IniSetting::RawScanner. */
  RETURN_TOKEN(TC_RAW, yytext, yyleng);
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 290 "zend-ini.ll"
{
/* End of option value */
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 297 "zend-ini.ll"
{
/* Get constant option value */
  RETURN_TOKEN(TC_CONSTANT, yytext, yyleng);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 302 "zend-ini.ll"
{
/* Get number option value as string */
  RETURN_TOKEN(TC_NUMBER, yytext, yyleng);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 307 "zend-ini.ll"
{
/* Disallow these chars outside option values */
  return yytext[0];
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 312 "zend-ini.ll"
{
/* Boolean operators */
  return yytext[0];
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 317 "zend-ini.ll"
{
/* Make = used in option value to trigger error */
  yyless(0);
  BEGIN(INITIAL);
  return END_OF_LINE;
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 324 "zend-ini.ll"
{
/* Get everything else as option/offset value */
  RETURN_TOKEN(TC_STRING, yytext, yyleng);
}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 329 "zend-ini.ll"
{
/* Get rest as section/offset value */
  RETURN_TOKEN(TC_STRING, yytext, yyleng);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 334 "zend-ini.ll"
{
/* Double quoted '"' string start */
  yy_push_state(ST_DOUBLE_QUOTES);
  return '"';
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 340 "zend-ini.ll"
{
/* Double quoted '"' string ends */
  yy_pop_state();
  return '"';
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 346 "zend-ini.ll"
{
/* Escape double quoted string contents */
  if (yyleng > 1 && yytext[yyleng-2] == '$' && yytext[yyleng-1] == '"') {
    yyless(yyleng-1);
  }

  zend_ini_escape_string(*ini_lval, yytext, yyleng, '"');
  return TC_QUOTED_STRING;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 356 "zend-ini.ll"
{
  RETURN_TOKEN(TC_WHITESPACE, yytext, yyleng);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 360 "zend-ini.ll"
{
  /* eat whitespace */
  return GOTO_RESTART;
}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 365 "zend-ini.ll"
{
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 370 "zend-ini.ll"
{
/* Comment */
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 377 "zend-ini.ll"
{
/* #Comment */
  Logger::Error("Comments starting with '#' are deprecated in %s on line %d",
                SCNG(filename).data(), SCNG(lineno));
  BEGIN(INITIAL);
  SCNG(lineno)++;
  return END_OF_LINE;
}
	YY_BREAK
case YY_STATE_EOF(ST_VALUE):
case YY_STATE_EOF(ST_RAW):
#line 386 "zend-ini.ll"
{
/* End of option value (if EOF is reached before EOL) */
  BEGIN(INITIAL);
  return END_OF_LINE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 392 "zend-ini.ll"
ECHO;
	YY_BREAK
#line 1542 "zend-ini.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST_OFFSET):
case YY_STATE_EOF(ST_SECTION_VALUE):
case YY_STATE_EOF(ST_SECTION_RAW):
case YY_STATE_EOF(ST_DOUBLE_QUOTES):
case YY_STATE_EOF(ST_VARNAME):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 47);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 191 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 47;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 191 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 190);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 392 "zend-ini.ll"



static void __attribute__((__unused__))
suppress_defined_but_not_used_warnings() {
  yyunput(0, 0);
  yy_top_state();
}

void zend_ini_scan(const String& str, int scanner_mode, const String& filename,
                   IniSetting::PFN_PARSER_CALLBACK callback, void *arg) {
  SCNG(scanner_mode) = scanner_mode;
  SCNG(filename) = filename.data();
  SCNG(lineno) = 1;
  SCNG(callback) = callback;
  SCNG(arg) = arg;

  BEGIN(INITIAL);

  /* Eat any UTF-8 BOM we find in the first 3 bytes */
  if (str.size() > 3 && memcmp(str.data(), "\xef\xbb\xbf", 3) == 0) {
    SCNG(state) = yy_scan_string(str.data() + 3);
  } else {
    SCNG(state) = yy_scan_string(str.data());
  }
}

void zend_ini_scan_cleanup() {
  yy_delete_buffer(SCNG(state));
  SCNG(state) = nullptr;
}

void zend_ini_callback(String *arg1, String *arg2, String *arg3,
                       int callback_type) {
  SCNG(callback)(arg1, arg2, arg3, callback_type, SCNG(arg));
}

void ini_error(const char *msg) {
  StringBuffer smsg;
  if (!SCNG(filename).empty()) {
    smsg.printf("%s in %s on line %d\n", msg, SCNG(filename).data(),
                SCNG(lineno));
  } else {
    smsg.append("Invalid configuration directive\n");
  }

  Logger::Warning("%s", smsg.data());
}

